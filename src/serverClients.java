
import java.io.IOException;
import java.net.*;
import java.util.logging.Level;
import java.util.logging.Logger;

public class serverClients extends javax.swing.JFrame {

    public static server server;
    public String estadoF, nuevaHora;
    public String puerto1, puerto2, puerto3, host1String, host2String, host3String;
    public byte[] b;
    DatagramPacket stopClock;
    DatagramPacket sendHour;
    DatagramSocket s;

    public serverClients() {
        initComponents();
        server = new server(clock1, clock2, clock3, host1, host2, host3);
        clock1.setEnabled(false);
        clock2.setEnabled(false);
        clock3.setEnabled(false);
        sendHour1.setEnabled(false);
        sendHour2.setEnabled(false);
        sendHour3.setEnabled(false);
        estadoF = "false";
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        modificarHora1 = new javax.swing.JButton();
        sendHour1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        clock1 = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        clock2 = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        clock3 = new javax.swing.JTextArea();
        host1 = new javax.swing.JLabel();
        host2 = new javax.swing.JLabel();
        host3 = new javax.swing.JLabel();
        modificarHora2 = new javax.swing.JButton();
        sendHour2 = new javax.swing.JButton();
        sendHour3 = new javax.swing.JButton();
        modificarHora3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        modificarHora1.setText("Modificar Hora");
        modificarHora1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modificarHora1ActionPerformed(evt);
            }
        });

        sendHour1.setText("Enviar");
        sendHour1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendHour1ActionPerformed(evt);
            }
        });

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        clock1.setColumns(20);
        clock1.setFont(new java.awt.Font("Avenir", 1, 90)); // NOI18N
        clock1.setRows(5);
        jScrollPane1.setViewportView(clock1);

        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane2.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        clock2.setColumns(20);
        clock2.setFont(new java.awt.Font("Avenir", 1, 90)); // NOI18N
        clock2.setRows(5);
        jScrollPane2.setViewportView(clock2);

        jScrollPane3.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane3.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        clock3.setColumns(20);
        clock3.setFont(new java.awt.Font("Avenir", 1, 90)); // NOI18N
        clock3.setRows(5);
        jScrollPane3.setViewportView(clock3);

        modificarHora2.setText("Modificar Hora");
        modificarHora2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modificarHora2ActionPerformed(evt);
            }
        });

        sendHour2.setText("Enviar");
        sendHour2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendHour2ActionPerformed(evt);
            }
        });

        sendHour3.setText("Enviar");
        sendHour3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendHour3ActionPerformed(evt);
            }
        });

        modificarHora3.setText("Modificar Hora");
        modificarHora3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modificarHora3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(host3, javax.swing.GroupLayout.PREFERRED_SIZE, 456, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(host2, javax.swing.GroupLayout.PREFERRED_SIZE, 456, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addGap(18, 18, 18)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 456, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 456, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(layout.createSequentialGroup()
                            .addContainerGap()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(host1, javax.swing.GroupLayout.PREFERRED_SIZE, 456, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 456, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(47, 47, 47)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(modificarHora1)
                            .addGap(35, 35, 35)
                            .addComponent(sendHour1))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(modificarHora2)
                            .addGap(35, 35, 35)
                            .addComponent(sendHour2)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(modificarHora3)
                        .addGap(35, 35, 35)
                        .addComponent(sendHour3)))
                .addContainerGap(26, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(host1, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(77, 77, 77)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(modificarHora1)
                            .addComponent(sendHour1)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                .addComponent(host2, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(64, 64, 64)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(modificarHora2)
                            .addComponent(sendHour2))))
                .addGap(22, 22, 22)
                .addComponent(host3, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(modificarHora3)
                            .addComponent(sendHour3))
                        .addGap(75, 75, 75))))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void modificarHora1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modificarHora1ActionPerformed

        try {
            clock1.setEnabled(true);
            sendHour1.setEnabled(true);
            s = new DatagramSocket();
            b = estadoF.getBytes();
            stopClock = new DatagramPacket(b, b.length, server.host1(), server.puerto1());
            s.send(stopClock);
            System.out.println("false");
        } catch (SocketException ex) {
            System.out.println("Error en crear socket : " + ex.toString());
        } catch (IOException ex) {
            System.out.println("Error en enviar datagrama : " + ex.toString());
        }
    }//GEN-LAST:event_modificarHora1ActionPerformed

    private void sendHour1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendHour1ActionPerformed
        try {
            clock1.setEnabled(false);
            s = new DatagramSocket();
            nuevaHora = "true" + clock1.getText();
            b = nuevaHora.getBytes();
            sendHour = new DatagramPacket(b, b.length, server.host1(), server.puerto1());
            s.send(sendHour);
        } catch (SocketException ex) {
            System.out.println("Error en crear socket : " + ex.toString());
        } catch (IOException ex) {
            System.out.println("Error en enviar datagrama : " + ex.toString());
        }
    }//GEN-LAST:event_sendHour1ActionPerformed

    private void modificarHora2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modificarHora2ActionPerformed

        try {
            clock2.setEnabled(true);
            sendHour2.setEnabled(true);
            s = new DatagramSocket();
            b = estadoF.getBytes();
            stopClock = new DatagramPacket(b, b.length, server.host2(), server.puerto2());
            s.send(stopClock);
        } catch (SocketException ex) {
            Logger.getLogger(serverClients.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(serverClients.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_modificarHora2ActionPerformed

    private void sendHour2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendHour2ActionPerformed
        try {
            clock2.setEnabled(false);
            s = new DatagramSocket();
            nuevaHora = "true" + clock2.getText();
            b = nuevaHora.getBytes();
            sendHour = new DatagramPacket(b, b.length, server.host2(), server.puerto2());
            s.send(sendHour);
        } catch (SocketException ex) {
            System.out.println("Error en crear socket : " + ex.toString());
        } catch (IOException ex) {
            System.out.println("Error en enviar datagrama : " + ex.toString());
        }
    }//GEN-LAST:event_sendHour2ActionPerformed

    private void modificarHora3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modificarHora3ActionPerformed

        try {
            clock3.setEnabled(true);
            sendHour3.setEnabled(true);
            s = new DatagramSocket();
            b = estadoF.getBytes();
            stopClock = new DatagramPacket(b, b.length, server.host3(), server.puerto3());
            s.send(stopClock);
        } catch (SocketException ex) {
            Logger.getLogger(serverClients.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(serverClients.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_modificarHora3ActionPerformed

    private void sendHour3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendHour3ActionPerformed
        try {
            clock3.setEnabled(false);
            s = new DatagramSocket();
            nuevaHora = "true" + clock3.getText();
            b = nuevaHora.getBytes();
            sendHour = new DatagramPacket(b, b.length, server.host3(), server.puerto3());
            s.send(sendHour);
        } catch (SocketException ex) {
            System.out.println("Error en crear socket : " + ex.toString());
        } catch (IOException ex) {
            System.out.println("Error en enviar datagrama : " + ex.toString());
        }
    }//GEN-LAST:event_sendHour3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(serverClients.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(serverClients.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(serverClients.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(serverClients.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new serverClients().setVisible(true);
                server.start();
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea clock1;
    private javax.swing.JTextArea clock2;
    private javax.swing.JTextArea clock3;
    private javax.swing.JLabel host1;
    private javax.swing.JLabel host2;
    private javax.swing.JLabel host3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton modificarHora1;
    private javax.swing.JButton modificarHora2;
    private javax.swing.JButton modificarHora3;
    private javax.swing.JButton sendHour1;
    private javax.swing.JButton sendHour2;
    private javax.swing.JButton sendHour3;
    // End of variables declaration//GEN-END:variables
}
